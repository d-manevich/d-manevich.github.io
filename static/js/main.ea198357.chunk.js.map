{"version":3,"sources":["progress/progressReducer.js","rootReducer.js","progress/components/Step.js","progress/components/Progress.js","progress/index.js","App.js","serviceWorker.js","index.js"],"names":["changeProgress","createAction","handleActions","Object","defineProperty","state","_ref","payload","objectSpread","progress","steps","combineReducers","progressState","progressReducer","Step","title","isActive","disabled","onClick","react_default","a","createElement","StepBtn","StepTitle","defaultProps","pulseKeyframe","keyframes","_templateObject","styled","button","_templateObject2","props","div","_templateObject3","Progress","onProgressChange","currentStepIndex","Math","floor","length","progressOnStep","ProgressBar","map","step","index","components_Step","key","progressKeyframe","Progress_templateObject","Progress_templateObject2","connect","dispatch","bindActionCreators","App","Wrapper","Container","src_progress","Component","App_templateObject","App_templateObject2","Boolean","window","location","hostname","match","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OASaA,EAAiBC,YAPC,4BAShBC,cAAcC,OAAAC,EAAA,EAAAD,CAAA,GATE,2BAUV,SAACE,EAADC,GAAA,IAAUC,EAAVD,EAAUC,QAAV,OAAAJ,OAAAK,EAAA,EAAAL,CAAA,GACdE,EADc,CAEjBI,SAAUF,MAVM,CAClBE,SAAU,GACVC,MAAO,CAAC,SAAU,UAAW,QAAS,YCHzBC,cAAgB,CAC7BC,cAAeC,yxCCAjB,IAAMC,EAAO,SAAAR,GAAA,IAAGS,EAAHT,EAAGS,MAAOC,EAAVV,EAAUU,SAAUC,EAApBX,EAAoBW,SAAUC,EAA9BZ,EAA8BY,QAA9B,OACXC,EAAAC,EAAAC,cAACC,EAAD,CACEN,SAAUA,EACVE,QAASD,EAAW,KAAOC,EAC3BD,SAAUA,GAEVE,EAAAC,EAAAC,cAACE,EAAD,KAAaR,KAWjBD,EAAKU,aAAe,CAClBT,MAAO,GACPC,UAAU,EACVC,UAAU,EACVC,QAAS,cAGIJ,QAETW,EAAgBC,YAAHC,KAebL,EAAUM,IAAOC,OAAVC,IAMS,SAAAC,GAAK,OAAIA,EAAMf,SAAW,UAAY,WACjD,SAAAe,GAAK,OAAIA,EAAMf,SAAW,UAAY,WAiC9BS,GAKbF,EAAYK,IAAOI,IAAVC,0jBC5Ef,IAyBeC,EAzBE,SAAA5B,GAA2C,IAAxCG,EAAwCH,EAAxCG,SAAUC,EAA8BJ,EAA9BI,MAAOyB,EAAuB7B,EAAvB6B,iBAC7BC,EAAmBC,KAAKC,OAAO5B,EAAM6B,OAAS,GAAK9B,EAAW,KAC9D+B,EAAiB,KAAO9B,EAAM6B,OAAS,GAE7C,OACEpB,EAAAC,EAAAC,cAACoB,EAAD,CAAahC,SAAUA,GACpBC,EAAMgC,IAAI,SAACC,EAAMC,GAAP,OACTzB,EAAAC,EAAAC,cAACwB,EAAD,CACE9B,MAAO4B,EACP3B,SAAU4B,GAASR,EACnBlB,QAAS,kBAAMiB,EAAiBK,EAAiBI,IACjD3B,SAAU2B,EAAQ,EAAIR,GAAoBQ,EAAQ,EAAIR,EACtDU,IAAKF,QAeTG,EAAmBrB,YAAHsB,KAMhBP,EAAcb,IAAOI,IAAViB,IAeJ,SAAAlB,GAAK,OAAIA,EAAMtB,UAEXsC,GClDFG,cATS,SAAA7C,GAAK,MAAK,CAChCI,SAAUJ,EAAMO,cAAcH,SAC9BC,MAAOL,EAAMO,cAAcF,QAGF,SAAAyC,GAAQ,OAAIC,YAAmB,CACxDjB,iBAAkBnC,GACjBmD,IAEYD,CAA6ChB,sRCE7CmB,mLAVX,OACElC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,eALQC,aAcZH,EAAU1B,IAAOI,IAAV0B,KAOPH,EAAY3B,IAAOI,IAAV2B,KCXKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAQC,YACZC,EACAN,OAAOO,8BAAgCP,OAAOO,gCAGhDC,IAASC,OACPnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUN,MAAOA,GACf9C,EAAAC,EAAAC,cAACmD,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea198357.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions'\n\nexport const CHANGE_PROGRESS = 'progress/CHANGE_PROGRESS'\n\nconst initalState = {\n  progress: 34,\n  steps: ['Design', 'Develop', 'Build', 'Launch']\n}\n\nexport const changeProgress = createAction(CHANGE_PROGRESS)\n\nexport default handleActions({\n  [CHANGE_PROGRESS]: (state, { payload }) => ({\n    ...state,\n    progress: payload\n  })\n}, initalState)\n","import { combineReducers } from 'redux'\nimport progressReducer from 'progress/progressReducer'\n\nexport default combineReducers({\n  progressState: progressReducer\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { keyframes } from 'styled-components'\n\nconst Step = ({ title, isActive, disabled, onClick }) => (\n  <StepBtn\n    isActive={isActive}\n    onClick={disabled ? null : onClick}\n    disabled={disabled}\n  >\n    <StepTitle>{ title }</StepTitle>\n  </StepBtn>\n)\n\nStep.propTypes = {\n  title: PropTypes.string,\n  isActive: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func\n}\n\nStep.defaultProps = {\n  title: '',\n  isActive: false,\n  disabled: false,\n  onClick: () => {}\n}\n\nexport default Step\n\nconst pulseKeyframe = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  33% {\n    transform: scale(1.2);\n  }\n  33% {\n    transform: scale(0.9);\n  }\n  100% {\n    transform: scale(1);\n  }\n`\n\nconst StepBtn = styled.button`\n  position: relative;\n  cursor: pointer;\n  outline: none;\n  height: 10px;\n  width: 10px;\n  background-color: ${props => props.isActive ? '#5110df' : '#dbdbdb'};\n  color: ${props => props.isActive ? '#5110df' : '#dbdbdb'};\n  transition: background-color 400ms ease-out;\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &:before,\n  &:after {\n    content: '';\n    position: absolute;\n    border-radius: 50%;\n  }\n\n  &:before {\n    top: -15px;\n    left: -15px;\n    width: 40px;\n    height: 40px;\n    background-color: inherit;\n  }\n\n  &:after {\n    top: -5px;\n    left: -5px;\n    width: 20px;\n    height: 20px;\n    background-color: white;\n  }\n\n  &:not([disabled]):hover {\n    &:before,\n    &:after {\n      animation: ${pulseKeyframe} 700ms ease-out infinite;\n    }\n  }\n`\n\nconst StepTitle = styled.div`\n  position: absolute;\n  left: 50%;\n  top: -70px;\n  transform: translateX(-50%);\n  font-weight: bold;\n  font-size: 22px;\n  transition: color 400ms ease-out;\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { keyframes } from 'styled-components'\nimport Step from './Step'\n\nfunction stepsProp (props, propName) {\n  if (!Array.isArray(props[propName])) {\n    return new Error(`${propName} should be an array`)\n  }\n  if (props[propName].length < 2 || props[propName].length > 5) {\n    return new Error(`Minimum number of ${propName} two and a maximum five`)\n  }\n}\n\nconst Progress = ({ progress, steps, onProgressChange }) => {\n  const currentStepIndex = Math.floor((steps.length - 1) * progress / 100)\n  const progressOnStep = 100 / (steps.length - 1)\n\n  return (\n    <ProgressBar progress={progress}>\n      {steps.map((step, index) =>\n        <Step\n          title={step}\n          isActive={index <= currentStepIndex}\n          onClick={() => onProgressChange(progressOnStep * index)}\n          disabled={index + 1 < currentStepIndex || index - 1 > currentStepIndex}\n          key={index}\n        />\n      )}\n    </ProgressBar>\n  )\n}\n\nProgress.propTypes = {\n  progress: PropTypes.number.isRequired,\n  onProgressChange: PropTypes.func.isRequired,\n  steps: stepsProp\n}\n\nexport default Progress\n\nconst progressKeyframe = keyframes`\n  0% {\n    width: 0;\n  }\n`\n\nconst ProgressBar = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 10px;\n  background-color: #dbdbdb;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: ${props => props.progress}%;\n    background-color: #5110df;\n    animation: ${progressKeyframe} 400ms ease-out;\n    transition: width 400ms ease-out;\n  }\n`\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { changeProgress } from './progressReducer'\nimport Progress from './components/Progress'\n\nconst mapStateToProps = state => ({\n  progress: state.progressState.progress,\n  steps: state.progressState.steps\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onProgressChange: changeProgress\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Progress)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport ProgressContainer from './progress'\n\nclass App extends Component {\n  render () {\n    return (\n      <Wrapper>\n        <Container>\n          <ProgressContainer />\n        </Container>\n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n\nconst Wrapper = styled.div`\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Container = styled.div`\n  width: 80%;\n  max-width: 1200px;\n`\n","/* eslint-env worker, serviceworker */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './rootReducer'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}